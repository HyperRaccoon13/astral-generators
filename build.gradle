plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.0.20"
	id "com.diffplug.spotless" version "6.25.0"
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8"
}

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")

version = "${mod_version}" + (buildNumber != null ? ".${buildNumber}" : "")
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url 'https://maven.parchmentmc.org'}
	maven { url 'https://libs.azuredoom.com:4443/mods' }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url 'https://jitpack.io' }
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://maven.resourcefulbees.com/repository/maven-public/"}
	mavenCentral()
}

configurations.configureEach {
	resolutionStrategy {
		force("net.fabricmc:fabric-loader:${project.loader_version}")
	}
}

fabricApi {
	configureDataGeneration()
}

loom {
	accessWidenerPath = file("src/main/resources/astralgenerators.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	modImplementation "mod.azure.azurelib:azurelib-fabric-${minecraft_version}:${project.azurelib_version}"
	include(modImplementation("com.github.definedentity:xenon:${project.xenon_version}"))

	modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
	modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")
	modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}")
}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			mod_id                 : project.mod_id,
			mod_name               : project.mod_name,
			mod_license            : project.mod_license,
			mod_version            : version,
			mod_description        : project.mod_description,
			fabric_version         : project.fabric_version,
	]
	inputs.properties replaceProperties

	filesMatching(['fabric.mod.json']) {
		expand replaceProperties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {}
}

spotless {
	kotlin {
		endWithNewline()
		indentWithTabs()
		ktfmt().kotlinlangStyle().configure { it.setRemoveUnusedImport(true) }
	}

	format("dotfiles") {
		target(".gitignore", ".gitattributes", ".editorconfig")
		indentWithSpaces(2)
		trimTrailingWhitespace()
		endWithNewline()
	}
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}